package rocks.appconcept.javatools.reflection;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.mock;
import static org.powermock.api.mockito.PowerMockito.when;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.lang.annotation.Annotation;
import java.lang.annotation.ElementType;
import java.lang.annotation.Inherited;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.net.URL;
import java.util.Calendar;
import java.util.Collection;
import java.util.Map;
import org.junit.After;
import org.junit.Test;
import rocks.appconcept.javatools.CoverageTool;

/**
 * Created by imeta on 22-Jan-17.
 */
public class ReflectionUtilsTest {

  @Retention(RetentionPolicy.RUNTIME)
  @Target(ElementType.TYPE)
  @Inherited
  public @interface ControllerClass {

  }

  @ControllerClass
  static class Foo {

  }

  static class Bar extends Foo {

  }

  @ControllerClass
  static interface Baz {

  }

  static interface Qux extends Baz {

  }

  static class Beta implements Qux {

  }

  static class Alpha extends Beta {

  }

  static interface Blart {

  }

  static class Bogus implements Blart {

  }

  public interface AAA {

  }

  public interface BBB extends AAA {

  }

  public class CCC implements BBB, AAA {

  }

  private class Parent {

    private String foo;
  }

  private class Child extends Parent {

    private String foo;
  }

  @Test
  public void testClassAnnotation() {
    Annotation a = ReflectionUtils.getClassAnnotation(Bar.class, ControllerClass.class);
    assertNotNull(a);
    assertTrue(a instanceof ControllerClass);

    a = ReflectionUtils.getClassAnnotation(Alpha.class, ControllerClass.class);
    assertNotNull(a);
    assertTrue(a instanceof ControllerClass);

    a = ReflectionUtils.getClassAnnotation(Bogus.class, ControllerClass.class);
    assertNull(a);

    a = ReflectionUtils.getClassAnnotation(CCC.class, ControllerClass.class);
    assertNull(a);
  }

  @Retention(RetentionPolicy.RUNTIME)
  @Target(ElementType.METHOD)
  public @interface ControllerMethod {

    String allow();
  }

  static class Foo1 {

    @ControllerMethod(allow = "false")
    public void yelp() {
    }
  }

  static class Bar1 extends Foo1 {

  }

  static interface Baz1 {

    @ControllerMethod(allow = "false")
    void yelp();
  }

  static interface Qux1 extends Baz1 {

  }

  static class Beta1 implements Qux1 {

    public void yelp() {
    }
  }

  static class Alpha1 extends Beta1 {

  }

  static interface Blart1 {

    void yelp();
  }

  static class Bogus1 implements Blart1 {

    public void yelp() {
    }
  }

  @Test
  public void testMethodAnnotation() throws Exception {
    Method m = ReflectionUtils.getMethod(Bar1.class, "yelp");
    Annotation a = ReflectionUtils.getMethodAnnotation(m, ControllerMethod.class);
    assertNotNull(a);
    assertTrue(a instanceof ControllerMethod);
    assertEquals("false", ((ControllerMethod) a).allow());

    m = ReflectionUtils.getMethod(Alpha1.class, "yelp");
    a = ReflectionUtils.getMethodAnnotation(m, ControllerMethod.class);
    assertNotNull(a);
    assertTrue(a instanceof ControllerMethod);

    m = ReflectionUtils.getMethod(Bogus1.class, "yelp");
    a = ReflectionUtils.getMethodAnnotation(m, ControllerMethod.class);
    assertNull(a);
  }

  @Test(expected = ThreadDeath.class)
  public void testGetDeclaredFields() throws Exception {
    Class c = Parent.class;

    Field f = c.getDeclaredField("foo");

    Collection<Field> fields = mock(Collection.class);
    when(fields.add(f)).thenThrow(new ThreadDeath());
    ReflectionUtils.getDeclaredFields(Parent.class, fields);
  }

  @Test
  public void testDeepDeclaredFields() throws Exception {
    Calendar c = Calendar.getInstance();
    Collection<Field> fields = ReflectionUtils.getDeepDeclaredFields(c.getClass());
    assertTrue(fields.size() > 0);

    boolean miss = true;
    boolean found = false;
    for (Field field : fields) {
      if ("firstDayOfWeek".equals(field.getName())) {
        found = true;
        break;
      }

      if ("blart".equals(field.getName())) {
        miss = false;
      }
    }

    assertTrue(found);
    assertTrue(miss);
  }

  @Test
  public void testDeepDeclaredFieldMap() throws Exception {
    Calendar c = Calendar.getInstance();
    Map<String, Field> fields = ReflectionUtils.getDeepDeclaredFieldMap(c.getClass());
    assertTrue(fields.size() > 0);
    assertTrue(fields.containsKey("firstDayOfWeek"));
    assertFalse(fields.containsKey("blart"));

    Map<String, Field> test2 = ReflectionUtils.getDeepDeclaredFieldMap(Child.class);
    assertEquals(2, test2.size());
    assertTrue(test2.containsKey(
        "rocks.appconcept.javatools.reflection.ReflectionUtilsTest$Parent.foo"));
    assertFalse(test2.containsKey(
        "rocks.appconcept.javatools.reflection.ReflectionUtilsTest$Child.foo"));
  }

  @Test
  public void testGetClassName() throws Exception {
    assertEquals("null", ReflectionUtils.getClassName((Object) null));
    assertEquals("java.lang.String", ReflectionUtils.getClassName("item"));
  }

  @Test
  public void testGetClassAnnotationsWithNull() throws Exception {
    assertNull(ReflectionUtils.getClassAnnotation(null, null));
  }

  /*@Test
  public void getClassNameFromByteCode() throws Exception {
    URL url = ReflectionUtilsTest.class.getClassLoader().getResource("ClassFile.class");
    File file = new File(url.getFile());
    InputStream fileInputStream = new FileInputStream(file);

    StringBuffer bytesStringBuffer = new StringBuffer();
    int _offset = 0;
    int _read = 0;
    byte[] byteArray = new byte[(int) file.length()];
    while (_offset < byteArray.length &&
        (_read = fileInputStream.read(byteArray, _offset,
            byteArray.length - _offset)) >= 0) {
      _offset += _read;
    }

    fileInputStream.close();
    for (int index = 0; index < byteArray.length; index++) {
      bytesStringBuffer.append(byteArray[index] + ",");
    }

    System.out.println(bytesStringBuffer.length() == 0 ? "" :
        bytesStringBuffer.substring(0, bytesStringBuffer.length() - 1));

    byte[] classFilename = {-54, -2, -70, -66, 0, 0, 0, 52, 0, -47, 10, 0, 41, 0, 110, 7, 0, 111,
        10, 0, 2, 0, 110, 9, 0, 40, 0, 112, 9, 0, 40, 0, 113, 9, 0, 40, 0, 114, 9, 0, 40, 0, 115, 9,
        0, 40, 0, 116, 10, 0, 117, 0, 118, 9, 0, 40, 0, 119, 7, 0, 120, 10, 0, 11, 0, 121, 11, 0,
        122, 0, 123, 7, 0, 124, 10, 0, 14, 0, 125, 18, 0, 0, 0, -126, 10, 0, -125, 0, -124, 7, 0,
        -123, 7, 0, -122, 10, 0, 19, 0, -121, 7, 0, -120, 10, 0, 21, 0, 110, 18, 0, 1, 0, -118, 7,
        0, -117, 10, 0, 24, 0, -116, 3, -54, -2, -70, -66, 10, 0, 24, 0, -115, 10, 0, 24, 0, -114,
        10, 0, 21, 0, -113, 10, 0, 24, 0, -112, 10, 0, 24, 0, -111, 10, 0, 21, 0, -110, 11, 0, 122,
        0, -109, 11, 0, 122, 0, -108, 11, 0, -107, 0, -106, 11, 0, -107, 0, -105, 7, 0, -104, 10, 0,
        11, 0, -103, 10, 0, 14, 0, -103, 7, 0, -102, 7, 0, -101, 1, 0, 12, 67, 111, 110, 115, 116,
        97, 110, 116, 80, 111, 111, 108, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115,
        101, 115, 1, 0, 6, 77, 101, 116, 104, 111, 100, 1, 0, 5, 70, 105, 101, 108, 100, 7, 0, -100,
        1, 0, 10, 67, 111, 100, 101, 87, 114, 105, 116, 101, 114, 1, 0, 11, 97, 99, 99, 101, 115,
        115, 70, 108, 97, 103, 115, 1, 0, 1, 73, 1, 0, 9, 99, 108, 97, 115, 115, 78, 97, 109, 101,
        1, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59,
        1, 0, 9, 98, 97, 115, 101, 67, 108, 97, 115, 115, 1, 0, 10, 105, 110, 116, 101, 114, 102,
        97, 99, 101, 115, 1, 0, 16, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 76, 105, 115,
        116, 59, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 36, 76, 106, 97, 118, 97,
        47, 117, 116, 105, 108, 47, 76, 105, 115, 116, 60, 76, 106, 97, 118, 97, 47, 108, 97, 110,
        103, 47, 83, 116, 114, 105, 110, 103, 59, 62, 59, 1, 0, 6, 102, 105, 101, 108, 100, 115, 1,
        0, 79, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 76, 105, 115, 116, 60, 76, 114,
        111, 99, 107, 115, 47, 97, 112, 112, 99, 111, 110, 99, 101, 112, 116, 47, 106, 97, 118, 97,
        116, 111, 111, 108, 115, 47, 114, 101, 102, 108, 101, 99, 116, 105, 111, 110, 47, 109, 97,
        107, 101, 114, 47, 67, 108, 97, 115, 115, 70, 105, 108, 101, 36, 70, 105, 101, 108, 100, 59,
        62, 59, 1, 0, 7, 109, 101, 116, 104, 111, 100, 115, 1, 0, 80, 76, 106, 97, 118, 97, 47, 117,
        116, 105, 108, 47, 76, 105, 115, 116, 60, 76, 114, 111, 99, 107, 115, 47, 97, 112, 112, 99,
        111, 110, 99, 101, 112, 116, 47, 106, 97, 118, 97, 116, 111, 111, 108, 115, 47, 114, 101,
        102, 108, 101, 99, 116, 105, 111, 110, 47, 109, 97, 107, 101, 114, 47, 67, 108, 97, 115,
        115, 70, 105, 108, 101, 36, 77, 101, 116, 104, 111, 100, 59, 62, 59, 1, 0, 6, 60, 105, 110,
        105, 116, 62, 1, 0, 59, 40, 73, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116,
        114, 105, 110, 103, 59, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105,
        110, 103, 59, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110,
        103, 59, 41, 86, 1, 0, 4, 67, 111, 100, 101, 1, 0, 15, 76, 105, 110, 101, 78, 117, 109, 98,
        101, 114, 84, 97, 98, 108, 101, 1, 0, 18, 76, 111, 99, 97, 108, 86, 97, 114, 105, 97, 98,
        108, 101, 84, 97, 98, 108, 101, 1, 0, 4, 116, 104, 105, 115, 1, 0, 55, 76, 114, 111, 99,
        107, 115, 47, 97, 112, 112, 99, 111, 110, 99, 101, 112, 116, 47, 106, 97, 118, 97, 116, 111,
        111, 108, 115, 47, 114, 101, 102, 108, 101, 99, 116, 105, 111, 110, 47, 109, 97, 107, 101,
        114, 47, 67, 108, 97, 115, 115, 70, 105, 108, 101, 59, 1, 0, 19, 91, 76, 106, 97, 118, 97,
        47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 1, 0, 8, 97, 100, 100, 70, 105,
        101, 108, 100, 1, 0, 40, 40, 73, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116,
        114, 105, 110, 103, 59, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105,
        110, 103, 59, 41, 86, 1, 0, 4, 110, 97, 109, 101, 1, 0, 4, 116, 121, 112, 101, 1, 0, 9, 97,
        100, 100, 77, 101, 116, 104, 111, 100, 1, 0, 108, 40, 73, 76, 106, 97, 118, 97, 47, 108, 97,
        110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103,
        47, 83, 116, 114, 105, 110, 103, 59, 83, 83, 76, 114, 111, 99, 107, 115, 47, 97, 112, 112,
        99, 111, 110, 99, 101, 112, 116, 47, 106, 97, 118, 97, 116, 111, 111, 108, 115, 47, 114,
        101, 102, 108, 101, 99, 116, 105, 111, 110, 47, 109, 97, 107, 101, 114, 47, 67, 108, 97,
        115, 115, 70, 105, 108, 101, 36, 67, 111, 100, 101, 87, 114, 105, 116, 101, 114, 59, 41, 86,
        1, 0, 9, 115, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 8, 109, 97, 120, 83, 116, 97, 99,
        107, 1, 0, 1, 83, 1, 0, 9, 109, 97, 120, 76, 111, 99, 97, 108, 115, 1, 0, 10, 99, 111, 100,
        101, 87, 114, 105, 116, 101, 114, 1, 0, 66, 76, 114, 111, 99, 107, 115, 47, 97, 112, 112,
        99, 111, 110, 99, 101, 112, 116, 47, 106, 97, 118, 97, 116, 111, 111, 108, 115, 47, 114,
        101, 102, 108, 101, 99, 116, 105, 111, 110, 47, 109, 97, 107, 101, 114, 47, 67, 108, 97,
        115, 115, 70, 105, 108, 101, 36, 67, 111, 100, 101, 87, 114, 105, 116, 101, 114, 59, 1, 0,
        11, 116, 111, 66, 121, 116, 101, 65, 114, 114, 97, 121, 1, 0, 4, 40, 41, 91, 66, 1, 0, 1,
        101, 1, 0, 21, 76, 106, 97, 118, 97, 47, 105, 111, 47, 73, 79, 69, 120, 99, 101, 112, 116,
        105, 111, 110, 59, 1, 0, 13, 83, 116, 97, 99, 107, 77, 97, 112, 84, 97, 98, 108, 101, 7, 0,
        -123, 1, 0, 20, 108, 97, 109, 98, 100, 97, 36, 116, 111, 66, 121, 116, 101, 65, 114, 114,
        97, 121, 36, 49, 1, 0, 34, 40, 76, 106, 97, 118, 97, 47, 105, 111, 47, 66, 121, 116, 101,
        65, 114, 114, 97, 121, 79, 117, 116, 112, 117, 116, 83, 116, 114, 101, 97, 109, 59, 41, 86,
        1, 0, 6, 115, 116, 114, 101, 97, 109, 1, 0, 31, 76, 106, 97, 118, 97, 47, 105, 111, 47, 66,
        121, 116, 101, 65, 114, 114, 97, 121, 79, 117, 116, 112, 117, 116, 83, 116, 114, 101, 97,
        109, 59, 1, 0, 12, 99, 111, 110, 115, 116, 97, 110, 116, 80, 111, 111, 108, 1, 0, 68, 76,
        114, 111, 99, 107, 115, 47, 97, 112, 112, 99, 111, 110, 99, 101, 112, 116, 47, 106, 97, 118,
        97, 116, 111, 111, 108, 115, 47, 114, 101, 102, 108, 101, 99, 116, 105, 111, 110, 47, 109,
        97, 107, 101, 114, 47, 67, 108, 97, 115, 115, 70, 105, 108, 101, 36, 67, 111, 110, 115, 116,
        97, 110, 116, 80, 111, 111, 108, 59, 1, 0, 9, 99, 108, 97, 115, 115, 68, 97, 116, 97, 1, 0,
        2, 91, 66, 1, 0, 3, 111, 117, 116, 1, 0, 26, 76, 106, 97, 118, 97, 47, 105, 111, 47, 68, 97,
        116, 97, 79, 117, 116, 112, 117, 116, 83, 116, 114, 101, 97, 109, 59, 1, 0, 10, 69, 120, 99,
        101, 112, 116, 105, 111, 110, 115, 1, 0, 13, 108, 97, 109, 98, 100, 97, 36, 110, 117, 108,
        108, 36, 48, 1, 0, 102, 40, 76, 114, 111, 99, 107, 115, 47, 97, 112, 112, 99, 111, 110, 99,
        101, 112, 116, 47, 106, 97, 118, 97, 116, 111, 111, 108, 115, 47, 114, 101, 102, 108, 101,
        99, 116, 105, 111, 110, 47, 109, 97, 107, 101, 114, 47, 67, 108, 97, 115, 115, 70, 105, 108,
        101, 36, 67, 111, 110, 115, 116, 97, 110, 116, 80, 111, 111, 108, 59, 76, 106, 97, 118, 97,
        47, 105, 111, 47, 66, 121, 116, 101, 65, 114, 114, 97, 121, 79, 117, 116, 112, 117, 116, 83,
        116, 114, 101, 97, 109, 59, 41, 86, 1, 0, 5, 105, 102, 97, 99, 101, 1, 0, 5, 102, 105, 101,
        108, 100, 1, 0, 61, 76, 114, 111, 99, 107, 115, 47, 97, 112, 112, 99, 111, 110, 99, 101,
        112, 116, 47, 106, 97, 118, 97, 116, 111, 111, 108, 115, 47, 114, 101, 102, 108, 101, 99,
        116, 105, 111, 110, 47, 109, 97, 107, 101, 114, 47, 67, 108, 97, 115, 115, 70, 105, 108,
        101, 36, 70, 105, 101, 108, 100, 59, 1, 0, 6, 109, 101, 116, 104, 111, 100, 1, 0, 62, 76,
        114, 111, 99, 107, 115, 47, 97, 112, 112, 99, 111, 110, 99, 101, 112, 116, 47, 106, 97, 118,
        97, 116, 111, 111, 108, 115, 47, 114, 101, 102, 108, 101, 99, 116, 105, 111, 110, 47, 109,
        97, 107, 101, 114, 47, 67, 108, 97, 115, 115, 70, 105, 108, 101, 36, 77, 101, 116, 104, 111,
        100, 59, 1, 0, 11, 105, 110, 110, 101, 114, 83, 116, 114, 101, 97, 109, 7, 0, -117, 7, 0,
        -99, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 14, 67, 108, 97, 115,
        115, 70, 105, 108, 101, 46, 106, 97, 118, 97, 12, 0, 61, 0, -98, 1, 0, 19, 106, 97, 118, 97,
        47, 117, 116, 105, 108, 47, 65, 114, 114, 97, 121, 76, 105, 115, 116, 12, 0, 57, 0, 54, 12,
        0, 59, 0, 54, 12, 0, 48, 0, 49, 12, 0, 50, 0, 51, 12, 0, 52, 0, 51, 7, 0, -97, 12, 0, -96,
        0, -95, 12, 0, 53, 0, 54, 1, 0, 59, 114, 111, 99, 107, 115, 47, 97, 112, 112, 99, 111, 110,
        99, 101, 112, 116, 47, 106, 97, 118, 97, 116, 111, 111, 108, 115, 47, 114, 101, 102, 108,
        101, 99, 116, 105, 111, 110, 47, 109, 97, 107, 101, 114, 47, 67, 108, 97, 115, 115, 70, 105,
        108, 101, 36, 70, 105, 101, 108, 100, 12, 0, 61, 0, 70, 7, 0, -94, 12, 0, -93, 0, -92, 1, 0,
        60, 114, 111, 99, 107, 115, 47, 97, 112, 112, 99, 111, 110, 99, 101, 112, 116, 47, 106, 97,
        118, 97, 116, 111, 111, 108, 115, 47, 114, 101, 102, 108, 101, 99, 116, 105, 111, 110, 47,
        109, 97, 107, 101, 114, 47, 67, 108, 97, 115, 115, 70, 105, 108, 101, 36, 77, 101, 116, 104,
        111, 100, 12, 0, 61, 0, 74, 1, 0, 16, 66, 111, 111, 116, 115, 116, 114, 97, 112, 77, 101,
        116, 104, 111, 100, 115, 15, 6, 0, -91, 16, 0, 88, 15, 7, 0, -90, 12, 0, -89, 0, -86, 7, 0,
        -85, 12, 0, -84, 0, -83, 1, 0, 19, 106, 97, 118, 97, 47, 105, 111, 47, 73, 79, 69, 120, 99,
        101, 112, 116, 105, 111, 110, 1, 0, 26, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 82,
        117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 61, 0, -82,
        1, 0, 66, 114, 111, 99, 107, 115, 47, 97, 112, 112, 99, 111, 110, 99, 101, 112, 116, 47,
        106, 97, 118, 97, 116, 111, 111, 108, 115, 47, 114, 101, 102, 108, 101, 99, 116, 105, 111,
        110, 47, 109, 97, 107, 101, 114, 47, 67, 108, 97, 115, 115, 70, 105, 108, 101, 36, 67, 111,
        110, 115, 116, 97, 110, 116, 80, 111, 111, 108, 15, 7, 0, -81, 12, 0, -89, 0, -80, 1, 0, 24,
        106, 97, 118, 97, 47, 105, 111, 47, 68, 97, 116, 97, 79, 117, 116, 112, 117, 116, 83, 116,
        114, 101, 97, 109, 12, 0, 61, 0, -79, 12, 0, -78, 0, -77, 12, 0, -76, 0, -77, 12, 0, -75, 0,
        -74, 12, 0, -75, 0, -73, 12, 0, -72, 0, -98, 12, 0, -71, 0, -70, 12, 0, -69, 0, -68, 12, 0,
        -67, 0, -66, 7, 0, -99, 12, 0, -65, 0, -64, 12, 0, -63, 0, -62, 1, 0, 16, 106, 97, 118, 97,
        47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 12, 0, -75, 0, -61, 1, 0, 53, 114,
        111, 99, 107, 115, 47, 97, 112, 112, 99, 111, 110, 99, 101, 112, 116, 47, 106, 97, 118, 97,
        116, 111, 111, 108, 115, 47, 114, 101, 102, 108, 101, 99, 116, 105, 111, 110, 47, 109, 97,
        107, 101, 114, 47, 67, 108, 97, 115, 115, 70, 105, 108, 101, 1, 0, 16, 106, 97, 118, 97, 47,
        108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 1, 0, 64, 114, 111, 99, 107, 115, 47, 97,
        112, 112, 99, 111, 110, 99, 101, 112, 116, 47, 106, 97, 118, 97, 116, 111, 111, 108, 115,
        47, 114, 101, 102, 108, 101, 99, 116, 105, 111, 110, 47, 109, 97, 107, 101, 114, 47, 67,
        108, 97, 115, 115, 70, 105, 108, 101, 36, 67, 111, 100, 101, 87, 114, 105, 116, 101, 114, 1,
        0, 18, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 73, 116, 101, 114, 97, 116, 111, 114,
        1, 0, 3, 40, 41, 86, 1, 0, 16, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 65, 114, 114,
        97, 121, 115, 1, 0, 6, 97, 115, 76, 105, 115, 116, 1, 0, 37, 40, 91, 76, 106, 97, 118, 97,
        47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 41, 76, 106, 97, 118, 97, 47, 117,
        116, 105, 108, 47, 76, 105, 115, 116, 59, 1, 0, 14, 106, 97, 118, 97, 47, 117, 116, 105,
        108, 47, 76, 105, 115, 116, 1, 0, 3, 97, 100, 100, 1, 0, 21, 40, 76, 106, 97, 118, 97, 47,
        108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 41, 90, 10, 0, -60, 0, -59, 10, 0, 40,
        0, -58, 1, 0, 6, 97, 99, 99, 101, 112, 116, 7, 0, -57, 1, 0, 8, 67, 97, 112, 116, 117, 114,
        101, 114, 1, 0, 109, 40, 76, 114, 111, 99, 107, 115, 47, 97, 112, 112, 99, 111, 110, 99,
        101, 112, 116, 47, 106, 97, 118, 97, 116, 111, 111, 108, 115, 47, 114, 101, 102, 108, 101,
        99, 116, 105, 111, 110, 47, 109, 97, 107, 101, 114, 47, 67, 108, 97, 115, 115, 70, 105, 108,
        101, 59, 41, 76, 114, 111, 99, 107, 115, 47, 97, 112, 112, 99, 111, 110, 99, 101, 112, 116,
        47, 106, 97, 118, 97, 116, 111, 111, 108, 115, 47, 105, 111, 47, 83, 116, 114, 101, 97, 109,
        85, 116, 105, 108, 115, 36, 67, 97, 112, 116, 117, 114, 101, 114, 59, 1, 0, 41, 114, 111,
        99, 107, 115, 47, 97, 112, 112, 99, 111, 110, 99, 101, 112, 116, 47, 106, 97, 118, 97, 116,
        111, 111, 108, 115, 47, 105, 111, 47, 83, 116, 114, 101, 97, 109, 85, 116, 105, 108, 115, 1,
        0, 12, 99, 97, 112, 116, 117, 114, 101, 66, 121, 116, 101, 115, 1, 0, 56, 40, 76, 114, 111,
        99, 107, 115, 47, 97, 112, 112, 99, 111, 110, 99, 101, 112, 116, 47, 106, 97, 118, 97, 116,
        111, 111, 108, 115, 47, 105, 111, 47, 83, 116, 114, 101, 97, 109, 85, 116, 105, 108, 115,
        36, 67, 97, 112, 116, 117, 114, 101, 114, 59, 41, 91, 66, 1, 0, 24, 40, 76, 106, 97, 118,
        97, 47, 108, 97, 110, 103, 47, 84, 104, 114, 111, 119, 97, 98, 108, 101, 59, 41, 86, 10, 0,
        40, 0, -56, 1, 0, -79, 40, 76, 114, 111, 99, 107, 115, 47, 97, 112, 112, 99, 111, 110, 99,
        101, 112, 116, 47, 106, 97, 118, 97, 116, 111, 111, 108, 115, 47, 114, 101, 102, 108, 101,
        99, 116, 105, 111, 110, 47, 109, 97, 107, 101, 114, 47, 67, 108, 97, 115, 115, 70, 105, 108,
        101, 59, 76, 114, 111, 99, 107, 115, 47, 97, 112, 112, 99, 111, 110, 99, 101, 112, 116, 47,
        106, 97, 118, 97, 116, 111, 111, 108, 115, 47, 114, 101, 102, 108, 101, 99, 116, 105, 111,
        110, 47, 109, 97, 107, 101, 114, 47, 67, 108, 97, 115, 115, 70, 105, 108, 101, 36, 67, 111,
        110, 115, 116, 97, 110, 116, 80, 111, 111, 108, 59, 41, 76, 114, 111, 99, 107, 115, 47, 97,
        112, 112, 99, 111, 110, 99, 101, 112, 116, 47, 106, 97, 118, 97, 116, 111, 111, 108, 115,
        47, 105, 111, 47, 83, 116, 114, 101, 97, 109, 85, 116, 105, 108, 115, 36, 67, 97, 112, 116,
        117, 114, 101, 114, 59, 1, 0, 25, 40, 76, 106, 97, 118, 97, 47, 105, 111, 47, 79, 117, 116,
        112, 117, 116, 83, 116, 114, 101, 97, 109, 59, 41, 86, 1, 0, 8, 119, 114, 105, 116, 101, 73,
        110, 116, 1, 0, 4, 40, 73, 41, 86, 1, 0, 10, 119, 114, 105, 116, 101, 83, 104, 111, 114,
        116, 1, 0, 5, 119, 114, 105, 116, 101, 1, 0, 29, 40, 76, 106, 97, 118, 97, 47, 105, 111, 47,
        68, 97, 116, 97, 79, 117, 116, 112, 117, 116, 83, 116, 114, 101, 97, 109, 59, 41, 86, 1, 0,
        5, 40, 91, 66, 41, 86, 1, 0, 5, 102, 108, 117, 115, 104, 1, 0, 8, 103, 101, 116, 67, 108,
        97, 115, 115, 1, 0, 21, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114,
        105, 110, 103, 59, 41, 83, 1, 0, 4, 115, 105, 122, 101, 1, 0, 3, 40, 41, 73, 1, 0, 8, 105,
        116, 101, 114, 97, 116, 111, 114, 1, 0, 22, 40, 41, 76, 106, 97, 118, 97, 47, 117, 116, 105,
        108, 47, 73, 116, 101, 114, 97, 116, 111, 114, 59, 1, 0, 7, 104, 97, 115, 78, 101, 120, 116,
        1, 0, 3, 40, 41, 90, 1, 0, 4, 110, 101, 120, 116, 1, 0, 20, 40, 41, 76, 106, 97, 118, 97,
        47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 1, 0, 97, 40, 76, 114, 111, 99,
        107, 115, 47, 97, 112, 112, 99, 111, 110, 99, 101, 112, 116, 47, 106, 97, 118, 97, 116, 111,
        111, 108, 115, 47, 114, 101, 102, 108, 101, 99, 116, 105, 111, 110, 47, 109, 97, 107, 101,
        114, 47, 67, 108, 97, 115, 115, 70, 105, 108, 101, 36, 67, 111, 110, 115, 116, 97, 110, 116,
        80, 111, 111, 108, 59, 76, 106, 97, 118, 97, 47, 105, 111, 47, 68, 97, 116, 97, 79, 117,
        116, 112, 117, 116, 83, 116, 114, 101, 97, 109, 59, 41, 86, 7, 0, -55, 12, 0, -54, 0, -51,
        12, 0, 87, 0, 88, 1, 0, 50, 114, 111, 99, 107, 115, 47, 97, 112, 112, 99, 111, 110, 99, 101,
        112, 116, 47, 106, 97, 118, 97, 116, 111, 111, 108, 115, 47, 105, 111, 47, 83, 116, 114,
        101, 97, 109, 85, 116, 105, 108, 115, 36, 67, 97, 112, 116, 117, 114, 101, 114, 12, 0, 98,
        0, 99, 1, 0, 34, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 105, 110, 118, 111, 107, 101,
        47, 76, 97, 109, 98, 100, 97, 77, 101, 116, 97, 102, 97, 99, 116, 111, 114, 121, 1, 0, 11,
        109, 101, 116, 97, 102, 97, 99, 116, 111, 114, 121, 7, 0, -49, 1, 0, 6, 76, 111, 111, 107,
        117, 112, 1, 0, -52, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 105, 110, 118,
        111, 107, 101, 47, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 115, 36, 76,
        111, 111, 107, 117, 112, 59, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114,
        105, 110, 103, 59, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 105, 110, 118, 111, 107,
        101, 47, 77, 101, 116, 104, 111, 100, 84, 121, 112, 101, 59, 76, 106, 97, 118, 97, 47, 108,
        97, 110, 103, 47, 105, 110, 118, 111, 107, 101, 47, 77, 101, 116, 104, 111, 100, 84, 121,
        112, 101, 59, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 105, 110, 118, 111, 107, 101,
        47, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 59, 76, 106, 97, 118, 97, 47,
        108, 97, 110, 103, 47, 105, 110, 118, 111, 107, 101, 47, 77, 101, 116, 104, 111, 100, 84,
        121, 112, 101, 59, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 105, 110, 118, 111,
        107, 101, 47, 67, 97, 108, 108, 83, 105, 116, 101, 59, 7, 0, -48, 1, 0, 37, 106, 97, 118,
        97, 47, 108, 97, 110, 103, 47, 105, 110, 118, 111, 107, 101, 47, 77, 101, 116, 104, 111,
        100, 72, 97, 110, 100, 108, 101, 115, 36, 76, 111, 111, 107, 117, 112, 1, 0, 30, 106, 97,
        118, 97, 47, 108, 97, 110, 103, 47, 105, 110, 118, 111, 107, 101, 47, 77, 101, 116, 104,
        111, 100, 72, 97, 110, 100, 108, 101, 115, 0, 33, 0, 40, 0, 41, 0, 0, 0, 6, 0, 18, 0, 48, 0,
        49, 0, 0, 0, 18, 0, 50, 0, 51, 0, 0, 0, 18, 0, 52, 0, 51, 0, 0, 0, 18, 0, 53, 0, 54, 0, 1,
        0, 55, 0, 0, 0, 2, 0, 56, 0, 18, 0, 57, 0, 54, 0, 1, 0, 55, 0, 0, 0, 2, 0, 58, 0, 18, 0, 59,
        0, 54, 0, 1, 0, 55, 0, 0, 0, 2, 0, 60, 0, 6, 0, -127, 0, 61, 0, 62, 0, 1, 0, 63, 0, 0, 0,
        -95, 0, 3, 0, 5, 0, 0, 0, 51, 42, -73, 0, 1, 42, -69, 0, 2, 89, -73, 0, 3, -75, 0, 4, 42,
        -69, 0, 2, 89, -73, 0, 3, -75, 0, 5, 42, 27, -75, 0, 6, 42, 44, -75, 0, 7, 42, 45, -75, 0,
        8, 42, 25, 4, -72, 0, 9, -75, 0, 10, -79, 0, 0, 0, 2, 0, 64, 0, 0, 0, 34, 0, 8, 0, 0, 0, 33,
        0, 4, 0, 24, 0, 15, 0, 25, 0, 26, 0, 34, 0, 31, 0, 35, 0, 36, 0, 36, 0, 41, 0, 37, 0, 50, 0,
        38, 0, 65, 0, 0, 0, 52, 0, 5, 0, 0, 0, 51, 0, 66, 0, 67, 0, 0, 0, 0, 0, 51, 0, 48, 0, 49, 0,
        1, 0, 0, 0, 51, 0, 50, 0, 51, 0, 2, 0, 0, 0, 51, 0, 52, 0, 51, 0, 3, 0, 0, 0, 51, 0, 53, 0,
        68, 0, 4, 0, 1, 0, 69, 0, 70, 0, 1, 0, 63, 0, 0, 0, 97, 0, 6, 0, 4, 0, 0, 0, 21, 42, -76, 0,
        4, -69, 0, 11, 89, 27, 44, 45, -73, 0, 12, -71, 0, 13, 2, 0, 87, -79, 0, 0, 0, 2, 0, 64, 0,
        0, 0, 10, 0, 2, 0, 0, 0, 41, 0, 20, 0, 42, 0, 65, 0, 0, 0, 42, 0, 4, 0, 0, 0, 21, 0, 66, 0,
        67, 0, 0, 0, 0, 0, 21, 0, 48, 0, 49, 0, 1, 0, 0, 0, 21, 0, 71, 0, 51, 0, 2, 0, 0, 0, 21, 0,
        72, 0, 51, 0, 3, 0, 1, 0, 73, 0, 74, 0, 1, 0, 63, 0, 0, 0, -123, 0, 9, 0, 7, 0, 0, 0, 27,
        42, -76, 0, 5, -69, 0, 14, 89, 27, 44, 45, 21, 4, 21, 5, 25, 6, -73, 0, 15, -71, 0, 13, 2,
        0, 87, -79, 0, 0, 0, 2, 0, 64, 0, 0, 0, 10, 0, 2, 0, 0, 0, 46, 0, 26, 0, 47, 0, 65, 0, 0, 0,
        72, 0, 7, 0, 0, 0, 27, 0, 66, 0, 67, 0, 0, 0, 0, 0, 27, 0, 48, 0, 49, 0, 1, 0, 0, 0, 27, 0,
        71, 0, 51, 0, 2, 0, 0, 0, 27, 0, 75, 0, 51, 0, 3, 0, 0, 0, 27, 0, 76, 0, 77, 0, 4, 0, 0, 0,
        27, 0, 78, 0, 77, 0, 5, 0, 0, 0, 27, 0, 79, 0, 80, 0, 6, 0, 1, 0, 81, 0, 82, 0, 1, 0, 63, 0,
        0, 0, 100, 0, 3, 0, 2, 0, 0, 0, 20, 42, -70, 0, 16, 0, 0, -72, 0, 17, -80, 76, -69, 0, 19,
        89, 43, -73, 0, 20, -65, 0, 1, 0, 0, 0, 9, 0, 10, 0, 18, 0, 3, 0, 64, 0, 0, 0, 14, 0, 3, 0,
        0, 0, 51, 0, 10, 0, 85, 0, 11, 0, 86, 0, 65, 0, 0, 0, 22, 0, 2, 0, 11, 0, 9, 0, 83, 0, 84,
        0, 1, 0, 0, 0, 20, 0, 66, 0, 67, 0, 0, 0, 85, 0, 0, 0, 6, 0, 1, 74, 7, 0, 86, 16, 2, 0, 87,
        0, 88, 0, 2, 0, 63, 0, 0, 0, -71, 0, 3, 0, 5, 0, 0, 0, 67, -69, 0, 21, 89, -73, 0, 22, 77,
        42, 44, -70, 0, 23, 0, 0, -72, 0, 17, 78, -69, 0, 24, 89, 43, -73, 0, 25, 58, 4, 25, 4, 18,
        26, -74, 0, 27, 25, 4, 3, -74, 0, 28, 25, 4, 16, 49, -74, 0, 28, 44, 25, 4, -74, 0, 29, 25,
        4, 45, -74, 0, 30, 25, 4, -74, 0, 31, -79, 0, 0, 0, 2, 0, 64, 0, 0, 0, 42, 0, 10, 0, 0, 0,
        53, 0, 8, 0, 56, 0, 19, 0, 77, 0, 29, 0, 78, 0, 36, 0, 79, 0, 42, 0, 80, 0, 49, 0, 81, 0,
        55, 0, 82, 0, 61, 0, 83, 0, 66, 0, 84, 0, 65, 0, 0, 0, 52, 0, 5, 0, 0, 0, 67, 0, 66, 0, 67,
        0, 0, 0, 0, 0, 67, 0, 89, 0, 90, 0, 1, 0, 8, 0, 59, 0, 91, 0, 92, 0, 2, 0, 19, 0, 48, 0, 93,
        0, 94, 0, 3, 0, 29, 0, 38, 0, 95, 0, 96, 0, 4, 0, 97, 0, 0, 0, 4, 0, 1, 0, 18, 16, 2, 0, 98,
        0, 99, 0, 2, 0, 63, 0, 0, 1, -86, 0, 3, 0, 6, 0, 0, 0, -38, -69, 0, 24, 89, 44, -73, 0, 25,
        78, 45, 42, -76, 0, 6, -74, 0, 28, 45, 43, 42, -76, 0, 7, -74, 0, 32, -74, 0, 28, 45, 43,
        42, -76, 0, 8, -74, 0, 32, -74, 0, 28, 45, 42, -76, 0, 10, -71, 0, 33, 1, 0, -74, 0, 28, 42,
        -76, 0, 10, -71, 0, 34, 1, 0, 58, 4, 25, 4, -71, 0, 35, 1, 0, -103, 0, 28, 25, 4, -71, 0,
        36, 1, 0, -64, 0, 37, 58, 5, 45, 43, 25, 5, -74, 0, 32, -74, 0, 28, -89, -1, -32, 45, 42,
        -76, 0, 4, -71, 0, 33, 1, 0, -74, 0, 28, 42, -76, 0, 4, -71, 0, 34, 1, 0, 58, 4, 25, 4, -71,
        0, 35, 1, 0, -103, 0, 25, 25, 4, -71, 0, 36, 1, 0, -64, 0, 11, 58, 5, 25, 5, 43, 45, -74, 0,
        38, -89, -1, -29, 45, 42, -76, 0, 5, -71, 0, 33, 1, 0, -74, 0, 28, 42, -76, 0, 5, -71, 0,
        34, 1, 0, 58, 4, 25, 4, -71, 0, 35, 1, 0, -103, 0, 25, 25, 4, -71, 0, 36, 1, 0, -64, 0, 14,
        58, 5, 25, 5, 43, 45, -74, 0, 39, -89, -1, -29, 45, 3, -74, 0, 28, -79, 0, 0, 0, 3, 0, 64,
        0, 0, 0, 74, 0, 18, 0, 0, 0, 57, 0, 9, 0, 58, 0, 17, 0, 59, 0, 29, 0, 60, 0, 41, 0, 61, 0,
        54, 0, 62, 0, 87, 0, 63, 0, 97, 0, 64, 0, 100, 0, 65, 0, 113, 0, 66, 0, -110, 0, 67, 0,
        -103, 0, 68, 0, -100, 0, 69, 0, -87, 0, 70, 0, -54, 0, 71, 0, -47, 0, 72, 0, -44, 0, 73, 0,
        -39, 0, 74, 0, 65, 0, 0, 0, 72, 0, 7, 0, 87, 0, 10, 0, 100, 0, 51, 0, 5, 0, -110, 0, 7, 0,
        101, 0, 102, 0, 5, 0, -54, 0, 7, 0, 103, 0, 104, 0, 5, 0, 0, 0, -38, 0, 66, 0, 67, 0, 0, 0,
        0, 0, -38, 0, 91, 0, 92, 0, 1, 0, 0, 0, -38, 0, 105, 0, 90, 0, 2, 0, 9, 0, -47, 0, 95, 0,
        96, 0, 3, 0, 85, 0, 0, 0, 32, 0, 6, -3, 0, 65, 7, 0, 106, 7, 0, 107, -6, 0, 34, -4, 0, 23,
        7, 0, 107, -6, 0, 31, -4, 0, 23, 7, 0, 107, -6, 0, 31, 0, 97, 0, 0, 0, 4, 0, 1, 0, 18, 0, 3,
        0, 108, 0, 0, 0, 2, 0, 109, 0, 43, 0, 0, 0, 50, 0, 6, 0, 21, 0, 40, 0, 42, 0, 9, 0, 14, 0,
        40, 0, 44, 0, 10, 0, 11, 0, 40, 0, 45, 0, 10, 0, 46, 0, 40, 0, 47, 6, 9, 0, -88, 0, -125, 0,
        -87, 6, 9, 0, -53, 0, -50, 0, -52, 0, 25, 0, 126, 0, 0, 0, 22, 0, 2, 0, 127, 0, 3, 0, -128,
        0, -127, 0, -128, 0, 127, 0, 3, 0, -128, 0, -119, 0, -128
    };
    assertEquals(ReflectionUtils.getClassNameFromByteCode(classFilename),
        "rocks.appconcept.javatools.reflection.maker.classFile");
  }*/

  @After
  public void tearDown() throws Exception {
    CoverageTool.testPrivateConstructor(ReflectionUtils.class);
  }
}